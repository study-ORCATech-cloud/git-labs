#!/bin/bash

# Sample commit-msg hook for Git
# This script validates the format of commit messages
#
# To install: Copy to .git/hooks/commit-msg and make executable (chmod +x)

echo "========================================================"
echo "Running commit-msg hook. Validating your commit message..."
echo "========================================================"

# Get the commit message (passed as the first argument)
commit_msg_file="$1"
commit_msg=$(cat "$commit_msg_file")

# Check if the message is empty
if [ -z "$commit_msg" ]; then
    echo "❌ Error: Empty commit message"
    exit 1
fi

# Check minimum length (e.g., at least 10 characters)
if [ ${#commit_msg} -lt 10 ]; then
    echo "❌ Error: Commit message too short (less than 10 characters)"
    echo "Current message: $commit_msg"
    exit 1
fi

# Check for a proper format: <type>: <description>
# Types: feat, fix, docs, style, refactor, test, chore
if ! grep -qE '^(feat|fix|docs|style|refactor|test|chore)(\([a-z]+\))?: .+' "$commit_msg_file"; then
    echo "❌ Error: Commit message does not follow the required format"
    echo "Format should be: <type>[optional scope]: <description>"
    echo "Types: feat, fix, docs, style, refactor, test, chore"
    echo ""
    echo "Examples:"
    echo "  feat: add new feature"
    echo "  fix(content): fix typo in text file"
    echo "  docs: update README"
    echo ""
    echo "Your message: $commit_msg"
    exit 1
fi

# Check for subject lines that are too long (e.g., longer than 50 characters)
subject_line=$(head -n 1 "$commit_msg_file")
if [ ${#subject_line} -gt 50 ]; then
    echo "❌ Error: Commit message subject line too long (over 50 characters)"
    echo "Current subject: $subject_line"
    exit 1
fi

echo "✅ Commit message validation passed!"
exit 0 