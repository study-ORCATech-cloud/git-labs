#!/bin/bash

# Sample pre-push hook for Git
# This script runs before pushing commits and validates content
#
# To install: Copy to .git/hooks/pre-push and make executable (chmod +x)

echo "================================================"
echo "Running pre-push hook. Validating repository..."
echo "================================================"

# The pre-push hook receives the following arguments:
# $1 - Name of the remote being pushed to (e.g., origin)
# $2 - URL of the remote
remote_name="$1"
remote_url="$2"

echo "Preparing to push to $remote_name ($remote_url)"

# Get the current branch
current_branch=$(git symbolic-ref --short HEAD)
echo "Current branch: $current_branch"

# Get the commits that will be pushed
commits_to_push=$(git log @{u}.. --pretty=format:"%h %s")
if [ -z "$commits_to_push" ]; then
    echo "No commits to push. Exiting."
    exit 0
fi

echo "Commits that will be pushed:"
git log @{u}.. --pretty=format:"  %h %s" || true
echo ""

# Check for large text files (greater than 100KB)
echo "Checking for large text files..."
large_files=$(find . -type f -name "*.txt" -size +100k -not -path "./.git/*")
if [ -n "$large_files" ]; then
    echo "❌ Error: Large text files detected"
    echo "$large_files"
    echo "Please split or compress large text files before pushing."
    exit 1
fi

# Validate text file content
echo "Validating text file content..."
text_files=$(git diff --name-only @{u}.. | grep -E '\.(txt|md)$')
if [ -n "$text_files" ]; then
    # Check for any files with very long lines
    for file in $text_files; do
        if [ -f "$file" ]; then
            long_lines=$(grep -n '.\{100,\}' "$file" | head -5)
            if [ -n "$long_lines" ]; then
                echo "❌ Warning: File $file contains very long lines:"
                echo "$long_lines"
                echo "Consider reformatting these lines for better readability."
                # Uncomment to block push with long lines
                # exit 1
            fi
        fi
    done
fi

# Check if pushing to a protected branch
if [ "$current_branch" = "main" ] || [ "$current_branch" = "master" ]; then
    # Require code review for protected branches
    # This is a simple example - a real implementation might check for review approvals
    read -p "⚠️ You're pushing to $current_branch. Has this been reviewed? (y/n): " confirm
    if [ "$confirm" != "y" ]; then
        echo "Push canceled. Please get a code review before pushing to $current_branch."
        exit 1
    fi
fi

echo "✅ Pre-push validation passed!"
echo "Proceeding with push..."
exit 0 